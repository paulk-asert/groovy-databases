//@Grab('org.hsqldb:hsqldb:2.3.2')
import groovy.sql.Sql
import groovy.transform.Field
import org.hsqldb.jdbc.JDBCDataSource
import java.util.logging.*

@Field Sql db = new Sql(new JDBCDataSource(
        database: 'jdbc:hsqldb:mem:marathon', user: 'sa', password: ''))

def reset() {
  db.execute '''
    DROP   TABLE Athlete IF EXISTS;
    CREATE TABLE Athlete (
      athleteId   INTEGER GENERATED BY DEFAULT AS IDENTITY,
      firstname   VARCHAR(64),
      lastname    VARCHAR(64),
      dateOfBirth DATE,
      UNIQUE(athleteId)
    );
  '''
  db.execute '''
    DROP   INDEX idx IF EXISTS;
    CREATE INDEX idx ON Athlete (athleteId);
  '''
  db.execute '''
    DROP   TABLE Run IF EXISTS;
    CREATE TABLE Run (
      runId       INTEGER GENERATED BY DEFAULT AS IDENTITY,
      distance    INTEGER,    -- in meters
      time        INTEGER,    -- in seconds
      venue       VARCHAR(64),
      whenRun     DATE,
      fkAthlete   INTEGER,
      CONSTRAINT fk FOREIGN KEY (fkAthlete)
        REFERENCES Athlete (athleteId) ON DELETE CASCADE
    );
  '''
}

def insertRun(h, m, s, venue, date, lastname) {
  def time = h * 60 * 60 + m * 60 + s
  db.execute """
    INSERT INTO Run (distance, time, venue, whenRun, fkAthlete)
      SELECT 42195, $time, $venue, $date,
        athleteId FROM Athlete WHERE lastname=$lastname
  """
}

def insertAthlete(firstname, lastname, dateOfBirth) {
  String athleteInsert = '''
    INSERT INTO Athlete (firstname, lastname, dateOfBirth) VALUES (?,?,?)
  '''
  db.execute athleteInsert, [firstname, lastname, dateOfBirth]
}

def insertTestData() {
  insertAthlete('Paul', 'Tergat', '1969-06-17')
  insertAthlete('Khalid', 'Khannouchi', '1971-12-22')
  insertAthlete('Ronaldo', 'da Costa', '1970-06-07')
  insertRun(2, 4, 55, 'Berlin', '2003-09-28', 'Tergat')
  insertRun(2, 5, 38, 'London', '2002-04-14', 'Khannouchi')
  insertRun(2, 5, 42, 'Chicago', '1999-10-24', 'Khannouchi')
  insertRun(2, 6, 05, 'Berlin', '1998-09-20', 'da Costa')
  println db.updateCount
}

Logger.getLogger('groovy.sql').level = Level.FINE
reset()
insertTestData()

db.execute '''
  CREATE FUNCTION SELECT_ATHLETE_RUN ()
  RETURNS TABLE (lastname VARCHAR(64), venue VARCHAR(64), whenRun DATE)
  READS SQL DATA
  RETURN TABLE (
    select Athlete.lastname, Run.venue, Run.whenRun
    from Athlete, Run
    where Athlete.athleteId = Run.fkAthlete
    order by whenRun
  )
'''
db.eachRow('CALL SELECT_ATHLETE_RUN()') {
  println "$it.lastname $it.venue $it.whenRun"
}
//da Costa Berlin 1998-09-20
//Khannouchi Chicago 1999-10-24
//Khannouchi London 2002-04-14
//Tergat Berlin 2003-09-28

db.execute '''
  CREATE FUNCTION FULL_NAME (p_lastname VARCHAR(64))
  RETURNS VARCHAR(100)
  READS SQL DATA
  BEGIN ATOMIC
    declare ans VARCHAR(100);
    SELECT CONCAT(firstname, ' ', lastname) INTO ans
    FROM Athlete WHERE lastname = p_lastname;
    return ans;
  END
'''

assert db.firstRow("{? = call FULL_NAME(?)}",
    ['Tergat'])[0] == 'Paul Tergat'

db.execute '''
  CREATE PROCEDURE CONCAT_NAME (OUT fullname VARCHAR(100),
    IN first VARCHAR(50), IN last VARCHAR(50))
  BEGIN ATOMIC
    SET fullname = CONCAT(first, ' ', last);
  END
'''

db.call("{call CONCAT_NAME(?, ?, ?)}",
    [Sql.VARCHAR, 'Paul', 'Tergat']) {
  fullname -> assert fullname == 'Paul Tergat'
}
